package ru.hogwarts.school;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HogwartsSchoolApplication {

	public static void main(String[] args) {
		SpringApplication.run(HogwartsSchoolApplication.class, args);
	}


//**Шаг 4**
//3. В каждом контроллере реализовать эндпоинты для создания, получения, изменения и удаления сущностей,
// используя все правила формирования REST-запросов: GET-методы для получения данных, POST — для создания…
//Созданы два контроллера как минимум с четырьмя CRUD-эндпоинтами. URL-маппинг и методы (GET, POST)
// используются по правилам построения REST-запросов, более подробно описанных в шпаргалке предыдущего урока.

//**Шаг 5**
//1. Добавить фильтрацию студентов по возрасту.
//Для этого в StudentController добавить эндпоинт, который принимает число (возраст — поле age) и
// возвращает список студентов, у которых совпал возраст с переданным числом.
//1. Добавить фильтрацию факультетов по цвету.
//Для этого в FacultyController добавить эндпоинт,который принимает строку (цвет — поле color) и
// возвращает список факультетов,у которых совпал цвет с переданной строкой.
//Созданы два эндпоинта в контроллерах StudentController и FacultyController, которые позволяют фильтровать
// студентов и факультеты.

//**Шаг 6**
//Добавить swagger к проекту. Для этого добавить зависимость к проекту.
//перейти на страницу Swagger-ui в браузере и проверить, что реализация первых трех шагов работает, как
// ожидается, путем вызовов запросов через открывшийся интерфейс.

//**Шаг 7**
//Установить Postman и вызвать все эндпоинты проекта, используя его.
//получилось вызвать все эндпоинты проекта и получить успешный ответ.

}
